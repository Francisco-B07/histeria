---
import Play from "../components/Play.astro";
import Pause from "../components/Pause.astro";
import SmokeImage from "../components/SmokeImage.astro";
import Layout from "../layouts/Layout.astro";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import ArrowLeft from "../components/ArrowLeft.astro";
import Home from "../components/Home.astro";

const { searchParams } = Astro.url;
const id = searchParams.get("id");
const description = searchParams.get("description");

if (id === null) {
  return Astro.redirect("/");
}

const url = getCldImageUrl({ src: id });
---

<Layout title="La historia detrás de tu imagen">
  <main
    data-id={id}
    data-description={description}
    class="bg-gradient-to-b from-black via-purple-900 to-black text-gray-300 min-h-screen flex flex-col items-center py-10 px-4"
  >
    <a href="/" class="cursor-pointer">
      <div class="absolute top-6 lg:top-28 left-4">
        <ArrowLeft />
      </div>
      <div class="absolute top-6 lg:top-28 left-10">
        <Home />
      </div>
    </a>

    <div id="history">
      <div
        class="flex flex-col lg:flex-row items-center justify-center py-6 lg:py-14 gap-4"
      >
        <h1
          id="title"
          class="text-3xl text-balance text-center lg:text-5xl font-bold text-orange-600 tracking-wide uppercase transition-opacity duration-300"
          style="font-family: 'Creepster', cursive;"
        >
        </h1>
        <div class="flex gap-3 mt-4 lg:mt-0 z-10">
          <div
            id="play-audio"
            class="rounded-full p-2 bg-red-500 text-white flex items-center cursor-pointer hover:scale-110 hover:bg-red-600"
          >
            <Play />
          </div>
          <div
            id="resume-audio"
            class="hidden rounded-full p-2 bg-red-500 text-white items-center cursor-pointer hover:scale-110 hover:bg-red-600"
          >
            <Play />
          </div>
          <div
            id="pause-audio"
            class="hidden rounded-full p-2 bg-red-500 text-white items-center cursor-pointer hover:scale-110 hover:bg-red-600"
          >
            <Pause />
          </div>
        </div>
      </div>
      <div
        class="flex flex-col lg:flex-row justify-center items-center lg:w-[900px] gap-4 lg:gap-10"
      >
        <div class="flex flex-col w-full lg:w-1/2 order-2 lg:order-1">
          <div
            id="story"
            class="text-lg text-gray-200 story-text min-h-[200px] opacity-0 transition-opacity duration-300"
          >
          </div>
        </div>
        <div class="relative w-full lg:w-1/2 order-1 lg:order-2">
          <img
            id="image"
            src={url}
            alt="Imagen de la historia"
            class="rounded-lg"
          />
          <div id="smoke">
            <SmokeImage />
          </div>
        </div>
      </div>
    </div>
    <div
      id="loading"
      class="text-2xl text-pretty absolute h-full flex justify-center items-center lg:text-4xl font-bold text-orange-600 tracking-wide transition-opacity duration-300"
      style="font-family: 'Creepster', cursive;"
    >
      El misterio está a punto de revelarse...
    </div>
  </main>
</Layout>

<style>
  img {
    max-width: 100%;
    height: auto;
    border-radius: 12px;
    transition: opacity 0.3s ease;
  }
  #story {
    background: rgba(0, 0, 0, 0.7);
    border: 2px solid #ff6347;
    border-radius: 12px;
    padding: 16px;
    max-width: 800px;
    margin: 20px auto;
    transition: opacity 0.3s ease;
  }

  @keyframes parpadeo {
    0%,
    100% {
      opacity: 0.9;
    }
    50% {
      opacity: 0.5;
    }
  }

  .story-text {
    animation: parpadeo 3s infinite;
  }
  .loading {
    display: none;
  }
  #loading {
    color: #ff4500;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
    animation: flicker 2s infinite alternate;
    letter-spacing: 2px;
    font-family: "Creepster", cursive;
    text-align: center;
  }

  @keyframes flicker {
    0% {
      opacity: 1;
      text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
    }
    50% {
      opacity: 0.6;
      text-shadow: 4px 4px 10px rgba(0, 0, 0, 0.9);
    }
    100% {
      opacity: 0.8;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 1);
    }
  }

  #history {
    opacity: 0;
    transition: opacity 3s ease;
  }
</style>

<script>
  import { getCldImageUrl } from "astro-cloudinary/helpers";

  const publicId =
    document.querySelector("main")?.getAttribute("data-id") ?? "";
  const description =
    document.querySelector("main")?.getAttribute("data-description") ?? "";

  const image = document.getElementById("image") as HTMLImageElement;
  const titleElement = document.getElementById("title");
  const storyElement = document.getElementById("story");
  const loadingElement = document.getElementById("loading");
  const history = document.getElementById("history");

  fetch("/api/generate-story", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ description: description }),
  })
    .then((response) => {
      if (!response.body) {
        console.error("No se pudo obtener el cuerpo de la respuesta.");
        return;
      }
      const reader = response.body.getReader();
      const decoder = new TextDecoder("utf-8");

      function read() {
        reader.read().then(({ done, value }) => {
          if (done && loadingElement && storyElement && history) {
            loadingElement.style.display = "none";
            storyElement.classList.remove("opacity-0");
            history.style.opacity = "1";
            history.classList.remove("hidden");
            return;
          }

          const data = JSON.parse(decoder.decode(value));
          if (!storyElement) {
            console.error(
              "No se encontró el elemento de la historia en el DOM."
            );
            return;
          }
          if (!titleElement) {
            console.error(
              "No se encontró el elemento de la historia en el DOM."
            );
            return;
          }

          // Añadir la historia al DOM en tiempo real
          titleElement.textContent = data.title;
          storyElement.textContent += data.story;
          storyElement.classList.remove("hidden");

          const url = getCldImageUrl({
            src: publicId,
            replaceBackground: data.prompt,
          });

          image.style.opacity = ".6";

          image.src = url;

          image.onload = () => {
            image.style.opacity = "1";
          };

          read();
        });
      }

      read();

      function textToSpeech(text: string) {
        const pauseButton = document.getElementById("pause-audio");
        const resumeButton = document.getElementById("resume-audio");

        // resumeButton!.classList.remove("hidden");
        pauseButton!.classList.remove("hidden");
        // pauseButton!.style.display = "block";
        const synth = window.speechSynthesis;

        // Dividir el texto en oraciones usando ". " como delimitador
        const sentences = text.split(". ");

        let currentIndex = 0; // Índice de la oración actual

        function speakNextSentence() {
          // resumeButton!.style.display = "none";
          if (currentIndex < sentences.length) {
            const speech = new SpeechSynthesisUtterance(
              sentences[currentIndex]
            );

            speech.lang = "es-ES";
            speech.pitch = 0.7;
            speech.rate = 0.9;
            speech.volume = 0.9;

            let voices = synth.getVoices();
            if (voices.length > 0) {
              speech.voice =
                voices.find(
                  (voice) =>
                    voice.lang === "es-ES" && voice.name.includes("Google")
                ) || voices[0];
            } else {
              synth.onvoiceschanged = () => {
                voices = synth.getVoices();
                speech.voice =
                  voices.find((voice) => voice.lang === "es-ES") || voices[0];
              };
            }

            // Evento que se llama cuando la síntesis de voz termina
            speech.onend = () => {
              currentIndex++; // Incrementar el índice para la siguiente oración
              speakNextSentence(); // Reproducir la siguiente oración
            };

            // Iniciar la reproducción
            synth.speak(speech);
          }
        }

        // Iniciar la síntesis de la primera oración
        speakNextSentence();
        // Manejo de eventos para pausar y reanudar

        pauseButton?.addEventListener("click", () => {
          pauseButton.style.display = "none";
          resumeButton!.style.display = "block";
          synth.pause(); // Pausar el audio
        });

        resumeButton?.addEventListener("click", () => {
          pauseButton!.style.display = "block";
          resumeButton.style.display = "none";
          synth.resume(); // Reanudar el audio
        });
      }

      const playButton = document.getElementById("play-audio");

      // Agrega el evento al botón para reproducir el audio
      playButton?.addEventListener("click", () => {
        const storyText = document.getElementById("story")!.innerText;
        playButton.style.display = "none";

        textToSpeech(storyText);
      });
    })
    .catch((error) => {
      console.error("Error generando la historia:", error);
    });
</script>
